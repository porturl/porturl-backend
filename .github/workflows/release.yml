name: Release

on:
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version increment type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
          - custom
      custom_version:
        description: 'Custom version (only if custom is selected above)'
        required: false
        type: string
      prerelease:
        description: 'Mark as pre-release'
        required: false
        default: false
        type: boolean
      draft:
        description: 'Create as draft release'
        required: false
        default: false
        type: boolean
      include_changelog:
        description: 'Include changelog in release notes'
        required: false
        default: true
        type: boolean

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up GraalVM
        uses: graalvm/setup-graalvm@v1
        with:
          java-version: '21'
          distribution: 'graalvm-community'
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4

      - name: Configure Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Determine release type
        id: release_type
        run: |
          version_type="${{ github.event.inputs.version_type }}"
          custom_version="${{ github.event.inputs.custom_version }}"
          
          case $version_type in
            patch)
              echo "incrementer=incrementPatch" >> $GITHUB_OUTPUT
              ;;
            minor)
              echo "incrementer=incrementMinor" >> $GITHUB_OUTPUT
              ;;
            major)
              echo "incrementer=incrementMajor" >> $GITHUB_OUTPUT
              ;;
            custom)
              if [ -z "$custom_version" ]; then
                echo "Custom version is required when custom type is selected"
                exit 1
              fi
              echo "incrementer=custom" >> $GITHUB_OUTPUT
              echo "custom_version=$custom_version" >> $GITHUB_OUTPUT
              ;;
          esac

      - name: Run Gradle Release (with version increment)
        if: steps.release_type.outputs.incrementer != 'custom'
        run: |
          ./gradlew release \
            -Prelease.useAutomaticVersion=true \
            -Prelease.releaseVersion= \
            -Prelease.newVersion= \
            -Prelease.incrementer=${{ steps.release_type.outputs.incrementer }}

      - name: Run Gradle Release (custom version)
        if: steps.release_type.outputs.incrementer == 'custom'
        run: |
          custom_version="${{ steps.release_type.outputs.custom_version }}"
          # Remove -SNAPSHOT if present in custom version for release
          release_version=$(echo "$custom_version" | sed 's/-SNAPSHOT//')
          # Calculate next snapshot version
          next_version="$custom_version"
          if [[ ! "$next_version" =~ -SNAPSHOT$ ]]; then
            next_version="$next_version-SNAPSHOT"
          fi
          
          ./gradlew release \
            -Prelease.useAutomaticVersion=true \
            -Prelease.releaseVersion="$release_version" \
            -Prelease.newVersion="$next_version"

      - name: Get release tag and version info
        id: release_info
        run: |
          # Get the latest tag (which should be the one just created)
          latest_tag=$(git describe --tags --abbrev=0)
          version_number=$(echo "$latest_tag" | sed 's/^v//')
          timestamp=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          echo "tag=$latest_tag" >> $GITHUB_OUTPUT
          echo "version=$version_number" >> $GITHUB_OUTPUT
          echo "timestamp=$timestamp" >> $GITHUB_OUTPUT
          echo "Release tag: $latest_tag"
          echo "Version: $version_number"

      - name: Checkout release tag for building artifacts
        run: |
          git checkout ${{ steps.release_info.outputs.tag }}

      - name: Build release artifacts (JAR and Native)
        run: |
          ./gradlew clean bootJar -x test
          ./gradlew nativeCompile

      - name: Prepare build info
        id: build_info
        run: |
          jar_file=$(find build/libs -name "*.jar" -not -name "*-plain.jar" | head -n1)
          jar_name=$(basename "$jar_file")
          native_file=$(find build/native/nativeCompile -type f -executable | head -n1)
          native_name=$(basename "$native_file")
          
          echo "jar-name=$jar_name" >> $GITHUB_OUTPUT
          echo "native-name=$native_name" >> $GITHUB_OUTPUT
          
          echo "Built JAR: $jar_name"
          echo "Built Native: $native_name"

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Prepare Docker tags
        id: docker_tags
        run: |
          VERSION="${{ steps.release_info.outputs.version }}"
          IS_PRERELEASE="${{ github.event.inputs.prerelease }}"

          # Base tags for native image
          TAGS="friesoft/porturl-backend:$VERSION-native,friesoft/porturl-backend:$VERSION"

          # Add latest tag only for stable releases
          if [ "$IS_PRERELEASE" != "true" ]; then
            TAGS="$TAGS,friesoft/porturl-backend:latest"
          fi

          # Add major.minor tag for stable releases
          if [ "$IS_PRERELEASE" != "true" ]; then
            MAJOR_MINOR=$(echo "$VERSION" | cut -d. -f1,2)
            TAGS="$TAGS,friesoft/porturl-backend:$MAJOR_MINOR"
          fi

          echo "tags=$TAGS" >> $GITHUB_OUTPUT
          echo "Docker tags: $TAGS"

      - name: Build and push Docker images (Native)
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile.native
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.docker_tags.outputs.tags }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          labels: |
            org.opencontainers.image.title=porturl-backend-native
            org.opencontainers.image.description=PortURL Backend Native Application
            org.opencontainers.image.version=${{ steps.release_info.outputs.version }}
            org.opencontainers.image.source=https://github.com/${{ github.repository }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.created=${{ steps.release_info.outputs.timestamp }}

      - name: Generate changelog (if enabled)
        id: changelog
        if: github.event.inputs.include_changelog == 'true'
        run: |
          # Get previous tag for changelog
          previous_tag=$(git tag --sort=-version:refname | grep -v "${{ steps.release_info.outputs.tag }}" | head -n1 || echo "")
          
          if [ -n "$previous_tag" ]; then
            echo "Generating changelog from $previous_tag to ${{ steps.release_info.outputs.tag }}"
            changelog=$(git log --pretty=format:"- %s (%h)" "$previous_tag..${{ steps.release_info.outputs.tag }}" --no-merges)
            if [ -n "$changelog" ]; then
              {
                echo "## Changes in ${{ steps.release_info.outputs.tag }}"
                echo ""
                echo "$changelog"
              } > CHANGELOG.md
              echo "changelog_file=CHANGELOG.md" >> $GITHUB_OUTPUT
            fi
          fi

      - name: Create GitHub Release
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ steps.release_info.outputs.tag }}
          name: "Release ${{ steps.release_info.outputs.tag }}"
          draft: ${{ github.event.inputs.draft == 'true' }}
          prerelease: ${{ github.event.inputs.prerelease == 'true' }}
          generateReleaseNotes: true
          artifacts: |
            build/libs/${{ steps.build_info.outputs.jar-name }}
            build/native/nativeCompile/${{ steps.build_info.outputs.native-name }}
          artifactContentType: "application/octet-stream"
          makeLatest: ${{ github.event.inputs.prerelease != 'true' }}
          skipIfReleaseExists: false
          allowUpdates: false
          bodyFile: ${{ steps.changelog.outputs.changelog_file || '' }}
          body: |
            ## 🚀 Release ${{ steps.release_info.outputs.tag }}
            
            ### 📦 Available Downloads
            - **JAR (JVM)**: `${{ steps.build_info.outputs.jar-name }}`
            - **Native Executable**: `${{ steps.build_info.outputs.native-name }}`
            
            ### 🐳 Docker Images
            ```bash
            # Native image (recommended)
            docker pull friesoft/porturl-backend:${{ steps.release_info.outputs.version }}
            
            # Version-specific native
            docker pull friesoft/porturl-backend:${{ steps.release_info.outputs.version }}-native
            ```
            
            ### 🔧 Performance Benefits (Native)
            - ⚡ **Faster startup**: ~50ms vs ~2-5s
            - 💾 **Lower memory**: 20-50% reduction  
            - 📦 **Smaller image**: ~50MB vs ~300MB
            
            ${{ steps.changelog.outputs.changelog_file && format('### 📋 Changelog\n{0}', steps.changelog.outputs.changelog_file) || '' }}
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload build reports (on failure)
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: build-reports-${{ steps.release_info.outputs.version }}
          path: |
            build/reports/
            build/test-results/
          retention-days: 7