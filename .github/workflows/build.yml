name: Build

on:
  pull_request:
    branches: ['**']
  push:
    branches: [ "main" ]

permissions:
  id-token: write
  contents: write
  pull-requests: read

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4

      - name: Run tests
        run: ./gradlew test

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: |
            build/reports/tests/
            build/test-results/
          retention-days: 7

  build:
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'

    outputs:
      jar-name: ${{ steps.jar-info.outputs.jar-name }}
      version: ${{ steps.jar-info.outputs.version }}

    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4

      - name: Build application
        run: ./gradlew clean build -x test

      - name: Get JAR information
        id: jar-info
        run: |
          jar_file=$(find build/libs -name "*.jar" -not -name "*-plain.jar" | head -n1)
          jar_name=$(basename "$jar_file")
          version=$(./gradlew properties -q | grep "version:" | awk '{print $2}')
          echo "jar-name=$jar_name" >> $GITHUB_OUTPUT
          echo "version=$version" >> $GITHUB_OUTPUT
          echo "Found JAR: $jar_name"
          echo "Version: $version"

      - name: Upload JAR artifact
        uses: actions/upload-artifact@v4
        with:
          name: jar-artifact
          path: build/libs/*.jar
          retention-days: 7

  docker:
    runs-on: ubuntu-latest
    needs: [test, build]
    if: github.ref == 'refs/heads/main'

    steps:
      - uses: actions/checkout@v4

      - name: Download JAR artifact
        uses: actions/download-artifact@v4
        with:
          name: jar-artifact
          path: build/libs/

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            friesoft/porturl-backend:snapshot
            friesoft/porturl-backend:main-${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          labels: |
            org.opencontainers.image.title=porturl-backend
            org.opencontainers.image.description=PortURL Backend Development Build
            org.opencontainers.image.version=${{ needs.build.outputs.version }}
            org.opencontainers.image.source=https://github.com/${{ github.repository }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.created=${{ github.run_id }}

  release-snapshot:
    runs-on: ubuntu-latest
    needs: [test, build, docker]
    if: github.ref == 'refs/heads/main'

    steps:
      - uses: actions/checkout@v4

      - name: Download JAR artifact
        uses: actions/download-artifact@v4
        with:
          name: jar-artifact
          path: build/libs/

      - name: Remove old snapshot prerelease
        run: |
          if gh release view snapshot --repo $GITHUB_REPOSITORY >/dev/null 2>&1; then
            gh release delete snapshot --cleanup-tag --yes --repo $GITHUB_REPOSITORY
            echo "Deleted existing snapshot release"
          else
            echo "No existing snapshot release found"
          fi
        env:
          GH_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
          GITHUB_REPOSITORY: "${{ github.repository }}"

      - name: Create snapshot prerelease
        uses: ncipollo/release-action@v1
        with:
          token: "${{ secrets.GITHUB_TOKEN }}"
          tag: "snapshot"
          prerelease: true
          name: "Development Build (Snapshot)"
          body: |
            üöß **Development Build from main branch**
            
            **Commit:** ${{ github.sha }}
            **Version:** ${{ needs.build.outputs.version }}
            **Docker Image:** `friesoft/porturl-backend:snapshot`
            
            This is an automated build from the latest main branch.
            ‚ö†Ô∏è Not intended for production use.
          artifacts: "build/libs/*.jar"
          artifactContentType: "application/java-archive"
          makeLatest: false
          allowUpdates: true