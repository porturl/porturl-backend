name: Build

on:
  pull_request:
    branches: ['**']
  push:
    branches: [ "main" ]

permissions:
  id-token: write
  contents: write
  pull-requests: read

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4

      - name: Run tests with coverage
        run: ./gradlew test jacocoTestReport

      - name: Upload test results and coverage
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: |
            build/reports/tests/
            build/test-results/
            build/reports/jacoco/
          retention-days: 7

      - name: Add coverage to PR
        id: jacoco
        if: github.event_name == 'pull_request'
        uses: madrapps/jacoco-report@v1
        with:
          paths: |
            ${{ github.workspace }}/build/reports/jacoco/test/jacocoTestReport.xml
          token: ${{ secrets.GITHUB_TOKEN }}
          # 🎯 GITHUB PR THRESHOLDS - Adjust these percentages
          min-coverage-overall: 40        # Overall project minimum (40%)
          min-coverage-changed-files: 60  # New/changed files minimum (60%)
          title: 'Code Coverage Report'
          update-comment: true
          debug-mode: false

  build:
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'

    outputs:
      jar-name: ${{ steps.build_info.outputs.JAR_NAME }}
      native-name: ${{ steps.build_info.outputs.NATIVE_NAME }}
      version: ${{ steps.build_info.outputs.version }}
      timestamp: ${{ steps.build_info.outputs.timestamp }}

    steps:
      - uses: actions/checkout@v4

      - name: Set up GraalVM
        uses: graalvm/setup-graalvm@v1
        with:
          java-version: '21'
          distribution: 'graalvm-community'
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4

      - name: Build release artifacts (JAR and Native) and get info
        run: |
          ./gradlew clean bootJar nativeCompile writeArtifactInfo -x test

      - name: Prepare build information
        id: build_info
        run: |
          # Load variables from file into the shell environment
          source build/artifact-info.properties

          cat build/artifact-info.properties >> $GITHUB_OUTPUT

          version=$(./gradlew properties -q | grep "version:" | awk '{print $2}')
          timestamp=$(date -u +"%Y-%m-%dT%H:%M:%SZ")

          echo "version=$version" >> $GITHUB_OUTPUT
          echo "timestamp=$timestamp" >> $GITHUB_OUTPUT

          echo "Built JAR: $JAR_NAME"
          echo "Built Native: $NATIVE_NAME"
          echo "Version: $version"

      - name: Upload JAR artifact
        uses: actions/upload-artifact@v4
        with:
          name: jar-artifact
          path: build/libs/${{ steps.build_info.outputs.JAR_NAME }}
          retention-days: 7

      - name: Upload Native executable
        uses: actions/upload-artifact@v4
        with:
          name: native-executable
          path: build/native/nativeCompile/${{ steps.build_info.outputs.NATIVE_NAME }}
          retention-days: 7

  docker:
    runs-on: ubuntu-latest
    needs: [test, build]
    if: github.ref == 'refs/heads/main'

    steps:
      - uses: actions/checkout@v4

      - name: Download Native executable
        uses: actions/download-artifact@v4
        with:
          name: native-executable
          path: build/native/nativeCompile/

      - name: Make executable runnable
        run: chmod +x build/native/nativeCompile/*

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Prepare Docker tags for snapshot
        id: docker_tags
        run: |
          VERSION="${{ needs.build.outputs.version }}"

          # Snapshot tags for development builds
          TAGS="friesoft/porturl-backend:snapshot-native"
          TAGS="$TAGS,friesoft/porturl-backend:snapshot"
          TAGS="$TAGS,friesoft/porturl-backend:main-${{ github.sha }}-native"
          TAGS="$TAGS,friesoft/porturl-backend:main-${{ github.sha }}"

          echo "tags=$TAGS" >> $GITHUB_OUTPUT
          echo "Docker tags: $TAGS"

      - name: Build and push Native Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile.native
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.docker_tags.outputs.tags }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          labels: |
            org.opencontainers.image.title=porturl-backend-native
            org.opencontainers.image.description=PortURL Backend Native Application (Development Build)
            org.opencontainers.image.version=${{ needs.build.outputs.version }}
            org.opencontainers.image.source=https://github.com/${{ github.repository }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.created=${{ needs.build.outputs.timestamp }}

  release-snapshot:
    runs-on: ubuntu-latest
    needs: [test, build, docker]
    if: github.ref == 'refs/heads/main'

    steps:
      - uses: actions/checkout@v4

      - name: Download JAR artifact
        uses: actions/download-artifact@v4
        with:
          name: jar-artifact
          path: build/libs/

      - name: Download Native executable
        uses: actions/download-artifact@v4
        with:
          name: native-executable
          path: build/native/nativeCompile/

      - name: Remove old snapshot prerelease
        run: |
          if gh release view snapshot --repo $GITHUB_REPOSITORY >/dev/null 2>&1; then
            gh release delete snapshot --cleanup-tag --yes --repo $GITHUB_REPOSITORY
            echo "Deleted existing snapshot release"
          else
            echo "No existing snapshot release found"
          fi
        env:
          GH_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
          GITHUB_REPOSITORY: "${{ github.repository }}"

      - name: Create snapshot prerelease
        uses: ncipollo/release-action@v1
        with:
          token: "${{ secrets.GITHUB_TOKEN }}"
          tag: "snapshot"
          prerelease: true
          name: "Development Build (Snapshot)"
          body: |
            ## 🚧 Development Build from main branch
            
            **Commit:** ${{ github.sha }}
            **Version:** ${{ needs.build.outputs.version }}
            **Built:** ${{ needs.build.outputs.timestamp }}
            
            ### 📦 Available Downloads
            - **JAR (JVM)**: `${{ needs.build.outputs.jar-name }}`
            - **Native Executable**: `${{ needs.build.outputs.native-name }}`

            ### 🐳 Docker Images
            ```bash
            # Native image
            docker pull friesoft/porturl-backend:snapshot

            # Commit-specific native
            docker pull friesoft/porturl-backend:main-${{ github.sha }}
            ```

            ### 🔧 Performance Benefits (Native)
            - ⚡ **Faster startup**: ~50ms vs ~2-5s
            - 💾 **Lower memory**: 20-50% reduction
            - 📦 **Smaller image**: ~50MB vs ~300MB
  
            ⚠️ **Not intended for production use** - This is an automated development build.
          artifacts: |
            build/libs/${{ needs.build.outputs.jar-name }}
            build/native/nativeCompile/${{ needs.build.outputs.native-name }}
          artifactContentType: "application/octet-stream"
          makeLatest: false
          allowUpdates: true

      - name: Upload build reports (on failure)
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: build-reports-snapshot-${{ github.sha }}
          path: |
            build/reports/
            build/test-results/
          retention-days: 7